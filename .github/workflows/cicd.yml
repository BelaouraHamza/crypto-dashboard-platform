name: CI-CD Pipeline

on:
  push:
    branches: [ "main" ]   # 1Ô∏è‚É£ D√©clenche la pipeline √† chaque push sur main
  pull_request:
    branches: [ "main" ]   # 2Ô∏è‚É£ D√©clenche aussi sur PR vers main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # === √âTAPE 1 : R√©cup√©ration du code source ===
      - name: Checkout repository
        uses: actions/checkout@v3   # 3Ô∏è‚É£ On clone le repo dans la VM runner

      # === √âTAPE 2 : Setup Docker ===
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2   # 4Ô∏è‚É£ Docker Buildx pour multi-arch

      # === √âTAPE 3 : Connexion au registry (DockerHub ou GHCR) ===
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}   # 5Ô∏è‚É£ Utilisation des secrets GitHub
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # === √âTAPE 4 : Build & Push Backend ===
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend   # 6Ô∏è‚É£ Construit l‚Äôimage backend .NET
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/crypto-backend:latest

      # === √âTAPE 5 : Build & Push Frontend ===
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./src/frontend   # 7Ô∏è‚É£ Construit l‚Äôimage frontend Angular
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/crypto-frontend:latest

      # === √âTAPE 6 : Setup Ansible ===
      - name: Install Ansible
        run: |
          sudo apt update && sudo apt install -y ansible  # 8Ô∏è‚É£ Installe Ansible sur le runner

      # === √âTAPE 7 : Provisionnement du cluster avec Ansible ===
      - name: Run Ansible playbooks
        run: |
          ansible-playbook ops/ansible/playbooks/setup-cluster.yml       # 9Ô∏è‚É£ Cr√©ation cluster (kind ou minikube)
          ansible-playbook ops/ansible/playbooks/tls-bootstrap.yml       # üîü Certificat + TLS
          ansible-playbook ops/ansible/playbooks/deploy-apps.yml         # 1Ô∏è‚É£1Ô∏è‚É£ D√©ploiement initial des manifests

      # === √âTAPE 8 : Setup Kubectl ===
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config      # 1Ô∏è‚É£2Ô∏è‚É£ Injecte le kubeconfig depuis GitHub Secrets

      # === √âTAPE 9 : Helm Deployment ===
      - name: Deploy with Helm
        run: |
          helm upgrade --install crypto-dashboard ops/helm/crypto-chart \
            --namespace crypto \
            --create-namespace \
            -f ops/helm/crypto-chart/values.yaml                        # 1Ô∏è‚É£3Ô∏è‚É£ D√©ploiement via Helm (chart custom)

      # === √âTAPE 10 : D√©ploiement GitOps avec ArgoCD ===
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd /usr/local/bin/argocd              # 1Ô∏è‚É£4Ô∏è‚É£ T√©l√©charge et installe argocd CLI

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure                                               # 1Ô∏è‚É£5Ô∏è‚É£ Connexion √† l‚Äôinstance ArgoCD

      - name: Apply ArgoCD App
        run: |
          kubectl apply -f ops/argocd/app.yaml                        # 1Ô∏è‚É£6Ô∏è‚É£ D√©clare l‚Äôapplication dans ArgoCD
          argocd app sync crypto-dashboard                            # 1Ô∏è‚É£7Ô∏è‚É£ Sync pour appliquer les manifests depuis Git

