name: CI-CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ================================
  # CI : Backend
  # ================================
  ci-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker backend layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-backend
          key: backend-${{ github.sha }}
          restore-keys: backend-

      - name: Build & Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend/CryptoDashboardApp
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/crypto-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/crypto-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache-backend
          cache-to: type=local,dest=/tmp/.buildx-cache-backend

  # ================================
  # CI : Frontend
  # ================================
  ci-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: frontend-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: frontend-node-

      - name: Cache Docker frontend layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-frontend
          key: frontend-${{ github.sha }}
          restore-keys: frontend-

      - name: Build & Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./src/frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/crypto-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/crypto-frontend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache-frontend
          cache-to: type=local,dest=/tmp/.buildx-cache-frontend

  # ================================
  # CD : Deploy to Kubernetes / ArgoCD
  # ================================
  cd:
    runs-on: ubuntu-latest
    needs: [ci-backend, ci-frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Install required Ansible collections
        run: |
          ansible-galaxy collection install community.crypto:>=2.0.0 
          ansible-galaxy collection install community.kubernetes:>=2.0.0

      - name: Run bootstrap playbook
        run: |
          cd infra/ansible
          ansible-playbook playbooks/bootstrap.yml -i inventory

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy with Helm
        run: |
          helm upgrade --install crypto-dashboard infra/helm/crypto-chart \
            --namespace crypto \
            --create-namespace \
            -f infra/helm/crypto-chart/values.yaml

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd /usr/local/bin/argocd

      - name: Retrieve ArgoCD admin password if missing
        id: argocd-pass
        run: |
          if [ -z "${{ secrets.ARGOCD_PASSWORD }}" ]; then
            PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret \
                      -o jsonpath="{.data.password}" | base64 -d)
            echo "ARGOCD_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username admin \
            --password $ARGOCD_PASSWORD \
            --insecure || true

      - name: Apply ArgoCD App
        run: |
          kubectl apply -f infra/argocd/app.yaml
          if ! argocd app sync crypto-dashboard; then
            echo "App Sync failed, rolling back..."
            argocd app rollback crypto-dashboard
            exit 1
